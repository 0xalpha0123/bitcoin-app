"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyPermissions = applyPermissions;
exports.withPermissions = void 0;

function _iosPlugins() {
  const data = require("../plugins/ios-plugins");

  _iosPlugins = function () {
    return data;
  };

  return data;
}

/**
 * Apply permissions and their respective descriptions to the iOS Info.plist.
 * Providing a null description will remove the permission from the Info.plist.
 *
 * @param config
 * @param permissions record of strings where the key matches Info.plist permissions and the values are the permission descriptions.
 */
const withPermissions = (config, permissions) => {
  return (0, _iosPlugins().withInfoPlist)(config, async config => {
    config.modResults = applyPermissions(permissions, config.modResults);
    return config;
  });
};

exports.withPermissions = withPermissions;

function applyPermissions(permissions, infoPlist) {
  const entries = Object.entries(permissions);

  if (entries.length === 0) {// TODO: Debug warn
    // console.warn('[withPermissions] no permissions were provided');
  }

  for (const [permission, description] of entries) {
    if (description == null) {
      delete infoPlist[permission];
    } else {
      const existingPermission = infoPlist[permission];

      if (existingPermission && existingPermission !== description) {// TODO: Debug warn
        //   console.warn(
        //     `[withPermissionsIos][conflict] permission "${permission}" is already defined in the Info.plist with description "${existingPermission}"`
        //   );
      }

      infoPlist[permission] = description;
    }
  }

  return infoPlist;
}
//# sourceMappingURL=Permissions.js.map