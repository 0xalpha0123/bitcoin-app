"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeNameForGradle = sanitizeNameForGradle;
exports.getName = getName;
exports.setName = setName;
exports.applyNameSettingsGradle = applyNameSettingsGradle;
exports.withNameSettingsGradle = exports.withName = void 0;

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _androidPlugins() {
  const data = require("../plugins/android-plugins");

  _androidPlugins = function () {
    return data;
  };

  return data;
}

function _XML() {
  const data = require("../utils/XML");

  _XML = function () {
    return data;
  };

  return data;
}

function _warnings() {
  const data = require("../utils/warnings");

  _warnings = function () {
    return data;
  };

  return data;
}

function _Resources() {
  const data = require("./Resources");

  _Resources = function () {
    return data;
  };

  return data;
}

function _Strings() {
  const data = require("./Strings");

  _Strings = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Sanitize a name, this should be used for files and gradle names.
 * - `[/, \, :, <, >, ", ?, *, |]` are not allowed https://bit.ly/3l6xqKL
 *
 * @param name
 */
function sanitizeNameForGradle(name) {
  // Gradle disallows these:
  // The project name 'My-Special ðŸ˜ƒ Co/ol_Project' must not contain any of the following characters: [/, \, :, <, >, ", ?, *, |]. Set the 'rootProject.name' or adjust the 'include' statement (see https://docs.gradle.org/6.2/dsl/org.gradle.api.initialization.Settings.html#org.gradle.api.initialization.Settings:include(java.lang.String[]) for more details).
  return name.replace(/(\/|\\|:|<|>|"|\?|\*|\|)/g, '');
}

const withName = (0, _androidPlugins().createStringsXmlPlugin)(applyNameFromConfig, 'withName');
exports.withName = withName;

const withNameSettingsGradle = config => {
  return (0, _androidPlugins().withSettingsGradle)(config, config => {
    if (config.modResults.language === 'groovy') {
      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);
    } else {
      (0, _warnings().addWarningAndroid)('android-name-settings-gradle', `Cannot automatically configure settings.gradle if it's not groovy`);
    }

    return config;
  });
};

exports.withNameSettingsGradle = withNameSettingsGradle;

function getName(config) {
  return typeof config.name === 'string' ? config.name : null;
}
/**
 * Changes the display name on the home screen,
 * notifications, and others.
 */


async function setName(config, projectRoot) {
  const stringsPath = await (0, _Strings().getProjectStringsXMLPathAsync)(projectRoot);
  (0, _assert().default)(stringsPath);
  let stringsJSON = await (0, _Resources().readResourcesXMLAsync)({
    path: stringsPath
  });
  stringsJSON = applyNameFromConfig(config, stringsJSON);

  try {
    await (0, _XML().writeXMLAsync)({
      path: stringsPath,
      xml: stringsJSON
    });
  } catch {
    throw new Error(`Error setting name. Cannot write strings.xml to ${stringsPath}.`);
  }

  return true;
}

function applyNameFromConfig(config, stringsJSON) {
  const name = getName(config);

  if (name) {
    return (0, _Strings().setStringItem)([(0, _Resources().buildResourceItem)({
      name: 'app_name',
      value: name
    })], stringsJSON);
  }

  return (0, _Strings().removeStringItem)('app_name', stringsJSON);
}
/**
 * Regex a name change -- fragile.
 *
 * @param config
 * @param settingsGradle
 */


function applyNameSettingsGradle(config, settingsGradle) {
  var _getName;

  const name = sanitizeNameForGradle((_getName = getName(config)) !== null && _getName !== void 0 ? _getName : ''); // Select rootProject.name = '***' and replace the contents between the quotes.

  return settingsGradle.replace(/rootProject.name\s?=\s?(["'])(?:(?=(\\?))\2.)*?\1/g, `rootProject.name = '${name}'`);
}
//# sourceMappingURL=Name.js.map