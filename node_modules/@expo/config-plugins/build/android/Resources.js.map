{"version":3,"sources":["../../src/android/Resources.ts"],"names":["fallbackResourceString","readResourcesXMLAsync","path","fallback","xml","resources","ensureDefaultResourceXML","buildResourceItem","name","value","$","_","buildResourceGroup","parent","item","items","findResourceGroup","group","app","filter","head","matches","getResourceItemsAsObject","reduce","prev","curr","getObjectAsResourceItems","obj","Object","entries","map","getObjectAsResourceGroup"],"mappings":"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","sourcesContent":["import { readXMLAsync, XMLObject } from '../utils/XML';\n\nexport type ResourceGroupXML = {\n  $: {\n    name: string;\n    parent: string;\n  };\n  item: ResourceItemXML[];\n};\n\nexport type ResourceXML = {\n  resources: {\n    color?: ResourceItemXML[];\n    string?: ResourceItemXML[];\n    style?: ResourceGroupXML[];\n    // Add more if needed...\n  };\n};\n\nexport type ResourceItemXML = {\n  _: string;\n  $: {\n    name: string;\n  };\n};\n/**\n * Name of the resource folder.\n */\nexport type ResourceKind =\n  | 'values'\n  | 'values-night'\n  | 'values-v23'\n  | 'values-night-v23'\n  | 'drawable';\n\nconst fallbackResourceString = `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources></resources>`;\n\n/**\n * Read an XML file while providing a default fallback for resource files.\n *\n * @param options path to the XML file, returns a fallback XML if the path doesn't exist.\n */\nexport async function readResourcesXMLAsync({\n  path,\n  fallback = fallbackResourceString,\n}: {\n  path: string;\n  fallback?: string | null;\n}): Promise<ResourceXML> {\n  const xml = await readXMLAsync({ path, fallback });\n  // Ensure the type is expected.\n  if (!xml.resources) {\n    xml.resources = {};\n  }\n  return xml as ResourceXML;\n}\n\n/**\n * Ensure the provided xml has a `resources` object (the expected shape).\n *\n * @param xml\n */\nexport function ensureDefaultResourceXML(xml: XMLObject): ResourceXML {\n  if (!xml) {\n    xml = { resources: {} };\n  }\n  if (!xml.resources) {\n    xml.resources = {};\n  }\n\n  return xml as ResourceXML;\n}\n\n/**\n * Build a `ResourceItemXML` given its `name` and `value`. This makes things a bit more readable.\n *\n * - JSON: `{ $: { name }, _: value }`\n * - XML: `<item name=\"NAME\">VALUE</item>`\n *\n * @param props name and value strings.\n */\nexport function buildResourceItem({\n  name,\n  value,\n}: {\n  name: string;\n  value: string;\n}): ResourceItemXML {\n  return { $: { name }, _: value };\n}\n\nexport function buildResourceGroup(parent: {\n  name: string;\n  parent: string;\n  items?: ResourceItemXML[];\n}): ResourceGroupXML {\n  return {\n    $: { name: parent.name, parent: parent.parent },\n    item: parent.items ?? [],\n  };\n}\n\nexport function findResourceGroup(\n  xml: ResourceGroupXML[] | undefined,\n  group: { name: string; parent?: string }\n): ResourceGroupXML | null {\n  const app = xml?.filter?.(({ $: head }) => {\n    let matches = head.name === group.name;\n    if (group.parent != null && matches) {\n      matches = head.parent === group.parent;\n    }\n    return matches;\n  })?.[0];\n  return app ?? null;\n}\n\n/**\n * Helper to convert a basic XML object into a simple k/v pair.\n *\n * @param xml\n * @returns\n */\nexport function getResourceItemsAsObject(xml: ResourceItemXML[]): Record<string, string> | null {\n  return xml.reduce(\n    (prev, curr) => ({\n      ...prev,\n      [curr.$.name]: curr._,\n    }),\n    {}\n  );\n}\n\n/**\n * Helper to convert a basic k/v object to a ResourceItemXML array.\n *\n * @param xml\n * @returns\n */\nexport function getObjectAsResourceItems(obj: Record<string, string>): ResourceItemXML[] {\n  return Object.entries(obj).map(([name, value]) => ({\n    $: { name },\n    _: value,\n  }));\n}\n\nexport function getObjectAsResourceGroup(group: {\n  name: string;\n  parent: string;\n  item: Record<string, string>;\n}): ResourceGroupXML {\n  return {\n    $: {\n      name: group.name,\n      parent: group.parent,\n    },\n    item: getObjectAsResourceItems(group.item),\n  };\n}\n"],"file":"Resources.js"}